from math import *

from MITgcmutils import rdmds

from netCDF4 import Dataset

import numpy as np

import os 

import pylab as pl

import scipy.io

import scipy as spy

import sys

lib_path = os.path.abspath('../../Building_canyon/BuildCanyon/PythonModulesMITgcm') # Add absolute path to my python scripts
sys.path.append(lib_path)

import ReadOutTools_MITgcm as rout 

import MetricsPythonTools as mpt


### -----------------------------------------------------------------------------------------------------------------------------------


def main():
  
  expPath = sys.argv[1]
  run = sys.argv[2]
  
  Grid1, GridOut1, State1,StateOut1,Ptracers1, PtracersOut1 = mpt.getDatasets(expPath, run)
  
  nx = 360
  ny = 360
  nz = 90
  nt = 19 # t dimension size 

  rc = GridOut1.variables['RC']
  xc = rout.getField(Grid1, 'XC') # x coords tracer cells
  yc = rout.getField(Grid1, 'YC') # y coords tracer cells

  drF = GridOut1.variables['drF'] # vertical distance between faces
  dxG = rout.getField(Grid1,'dxG')

  MaskCan = rout.getMask(Grid1,'HFacC') 
  hFacCCan = rout.getField(Grid1,'HFacC') 
  rACan = rout.getField(Grid1,'rA') 
  drFCan=GridOut1.variables['drF']
  print('Finished reading grid variables')



  Tr1 = rout.getField(Ptracers1,'Tr01')
  Tr2 = rout.getField(Ptracers1,'Tr02')
  Tr3 = rout.getField(Ptracers1,'Tr03')
  Tr4 = rout.getField(Ptracers1,'Tr04')
  Tr5 = rout.getField(Ptracers1,'Tr05')
  Tr6 = rout.getField(Ptracers1,'Tr06')
  Tr7 = rout.getField(Ptracers1,'Tr07')
  Tr8 = rout.getField(Ptracers1,'Tr08')
  print('Finished reading tracer fields')
  
  Tr1ini = mpt.getProfile(Tr1[0,:,:,:],50,180) #Default is to get the whole column
  Tr2ini = mpt.getProfile(Tr2[0,:,:,:],50,180) #Default is to get the whole column
  Tr3ini = mpt.getProfile(Tr3[0,:,:,:],50,180) #Default is to get the whole column
  Tr4ini = mpt.getProfile(Tr4[0,:,:,:],50,180) #Default is to get the whole column
  Tr5ini = mpt.getProfile(Tr5[0,:,:,:],50,180) #Default is to get the whole column
  Tr6ini = mpt.getProfile(Tr6[0,:,:,:],50,180) #Default is to get the whole column
  Tr7ini = mpt.getProfile(Tr7[0,:,:,:],50,180) #Default is to get the whole column
  Tr8ini = mpt.getProfile(Tr8[0,:,:,:],50,180) #Default is to get the whole column
  
  (WatTr1, TrMassTr1) = mpt.howMuchWaterX(Tr1,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180) 
  (WatTr2, TrMassTr2) = mpt.howMuchWaterX(Tr2,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180) 
  (WatTr3, TrMassTr3) = mpt.howMuchWaterX(Tr3,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180) 
  (WatTr4, TrMassTr4) = mpt.howMuchWaterX(Tr4,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180) 
  (WatTr5, TrMassTr5) = mpt.howMuchWaterX(Tr5,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180) 
  (WatTr6, TrMassTr6) = mpt.howMuchWaterX(Tr6,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180) 
  (WatTr7, TrMassTr7) = mpt.howMuchWaterX(Tr7,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180) 
  (WatTr8, TrMassTr8) = mpt.howMuchWaterX(Tr8,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180) 
  print('Finished calculating mass on shlelf')
  
  (WatTr1CV, MassTr1CV) = mpt.howMuchWaterCV(Tr1,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180,49,309)
  (WatTr2CV, MassTr2CV) = mpt.howMuchWaterCV(Tr2,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180,49,309)
  (WatTr3CV, MassTr3CV) = mpt.howMuchWaterCV(Tr3,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180,49,309)
  (WatTr4CV, MassTr4CV) = mpt.howMuchWaterCV(Tr4,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180,49,309)
  (WatTr5CV, MassTr5CV) = mpt.howMuchWaterCV(Tr5,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180,49,309)
  (WatTr6CV, MassTr6CV) = mpt.howMuchWaterCV(Tr6,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180,49,309)
  (WatTr7CV, MassTr7CV) = mpt.howMuchWaterCV(Tr7,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180,49,309)
  (WatTr8CV, MassTr8CV) = mpt.howMuchWaterCV(Tr8,MaskCan,30,rACan,hFacCCan,drFCan,227,30,50,180,49,309)
  print('Finished calculating mass in control volume')
  
  TracerList = ['Tr1','Tr2','Tr3','Tr4','Tr5','Tr6','Tr7','Tr8']
  
  IniList = [Tr1ini,Tr2ini,Tr3ini,Tr4ini,Tr5ini,Tr6ini,Tr7ini,Tr8ini]
  MassList = [TrMassTr1,TrMassTr2,TrMassTr3,TrMassTr4,TrMassTr5,TrMassTr6,TrMassTr7,TrMassTr8]
  WatList = [WatTr1,WatTr2,WatTr3,WatTr4,WatTr5,WatTr6,WatTr7,WatTr8]
  MassCVList = [MassTr1CV,MassTr2CV,MassTr3CV,MassTr4CV,MassTr5CV,MassTr6CV,MassTr7CV,MassTr8CV]
  WatTr1CV = [WatTr1CV,WatTr2CV,WatTr3CV,WatTr4CV,WatTr5CV,WatTr6CV,WatTr7CV,WatTr8CV]
  
  for trstr,a,b,c,d,e, in zip(TracerList,IniList,MassList,WatList,MassCVList,WatTr1CV):
    filename1 = ('results/iniProfiles/BAR%sini%s' % (run,trstr))
    mpt.dumpFiles(filename1,a)
    print(filename1)
    
    filename2 = ('results/massShelf/BAR%smass%s' % (run,trstr))
    mpt.dumpFiles(filename2,b)
    print(filename2)
  
    filename3 = ('results/volumeHCWShelf/BAR%swat30%s' % (run,trstr) )
    mpt.dumpFiles(filename3,c)
    print(filename3)
  
    filename4 = ('results/massCV/BAR%smass%s' % (run,trstr))
    mpt.dumpFiles(filename4,d)
    print(filename4)
  
    filename5 =  ('results/volumeHCWCV/BAR%swat30%s' % (run,trstr))
    mpt.dumpFiles(filename5,e)
    print(filename5)
  
  #mpt.dumpFiles('results/iniProfiles/BARrun02iniTr1',Tr1ini)
  #mpt.dumpFiles('results/iniProfiles/BARrun02iniTr2',Tr2ini)
  #mpt.dumpFiles('results/iniProfiles/BARrun02iniTr3',Tr3ini)
  #mpt.dumpFiles('results/iniProfiles/BARrun02iniTr4',Tr4ini)
  #mpt.dumpFiles('results/iniProfiles/BARrun02iniTr5',Tr5ini)
  #mpt.dumpFiles('results/iniProfiles/BARrun02iniTr6',Tr6ini)
  #mpt.dumpFiles('results/iniProfiles/BARrun02iniTr7',Tr7ini)
  #mpt.dumpFiles('results/iniProfiles/BARrun02iniTr8',Tr8ini)
  3DDIFF
  
  #mpt.dumpFiles('results/massShelf/BARrun02massTr1',TrMassTr1)
  #mpt.dumpFiles('results/massShelf/BARrun02massTr2',TrMassTr2)
  #mpt.dumpFiles('results/massShelf/BARrun02massTr3',TrMassTr3)
  #mpt.dumpFiles('results/massShelf/BARrun02massTr4',TrMassTr4)
  #mpt.dumpFiles('results/massShelf/BARrun02massTr5',TrMassTr5)
  #mpt.dumpFiles('results/massShelf/BARrun02massTr6',TrMassTr6)
  #mpt.dumpFiles('results/massShelf/BARrun02massTr7',TrMassTr7)
  #mpt.dumpFiles('results/massShelf/BARrun02massTr8',TrMassTr8)
  
  #mpt.dumpFiles('results/volumeHCWShelf/BARrun02wat30Tr1',WatTr1)
  #mpt.dumpFiles('results/volumeHCWShelf/BARrun02wat30Tr2',WatTr2)
  #mpt.dumpFiles('results/volumeHCWShelf/BARrun02wat30Tr3',WatTr3)
  #mpt.dumpFiles('results/volumeHCWShelf/BARrun02wat30Tr4',WatTr4)
  #mpt.dumpFiles('results/volumeHCWShelf/BARrun02wat30Tr5',WatTr5)
  #mpt.dumpFiles('results/volumeHCWShelf/BARrun02wat30Tr6',WatTr6)
  #mpt.dumpFiles('results/volumeHCWShelf/BARrun02wat30Tr7',WatTr7)
  #mpt.dumpFiles('results/volumeHCWShelf/BARrun02wat30Tr8',WatTr8)
  
  #mpt.dumpFiles('results/massCV/BARrun02massTr1',MassTr1CV)
  #mpt.dumpFiles('results/massCV/BARrun02massTr2',MassTr2CV)
  #mpt.dumpFiles('results/massCV/BARrun02massTr3',MassTr3CV)
  #mpt.dumpFiles('results/massCV/BARrun02massTr4',MassTr4CV)
  #mpt.dumpFiles('results/massCV/BARrun02massTr5',MassTr5CV)
  #mpt.dumpFiles('results/massCV/BARrun02massTr6',MassTr6CV)
  #mpt.dumpFiles('results/massCV/BARrun02massTr7',MassTr7CV)
  #mpt.dumpFiles('results/massCV/BARrun02massTr8',MassTr8CV)
  
  #mpt.dumpFiles('results/volumeHCWCV/BARrun02wat30Tr1',WatTr1CV)
  #mpt.dumpFiles('results/volumeHCWCV/BARrun02wat30Tr2',WatTr2CV)
  #mpt.dumpFiles('results/volumeHCWCV/BARrun02wat30Tr3',WatTr3CV)
  #mpt.dumpFiles('results/volumeHCWCV/BARrun02wat30Tr4',WatTr4CV)
  #mpt.dumpFiles('results/volumeHCWCV/BARrun02wat30Tr5',WatTr5CV)
  #mpt.dumpFiles('results/volumeHCWCV/BARrun02wat30Tr6',WatTr6CV)
  #mpt.dumpFiles('results/volumeHCWCV/BARrun02wat30Tr7',WatTr7CV)
  #mpt.dumpFiles('results/volumeHCWCV/BARrun02wat30Tr8',WatTr8CV)
  print('Done writing')
  
  
  
main()

